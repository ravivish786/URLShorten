using URLShorten.Database;
using URLShorten.Dto;
using URLShorten.Interface;

namespace URLShorten.Service
{
    public class UrlManagerService : IUrlManager
    {
        private readonly AppDbContext _context;

        public UrlManagerService(AppDbContext context)
        {
            _context = context;
        }


        public async Task<Result<ShortUrlDto>> GetAsync(string shortUrl)
        {
            var data = await _context.FindAsync<ShortUrl>(shortUrl);
            if (data == null)
            {
                return Result<ShortUrlDto>.Fail("Short URL not found.");
            }
            data.AccessCount++;
            _context.ShortUrls.Update(data);
            await _context.SaveChangesAsync();
            return Result<ShortUrlDto>.Ok(MapData(data), "Short URL retrieved successfully.");
        }

        public async Task<Result<ShortUrlStatisticsDto>> GetStatisticsAsync(string shortUrl)
        {
            var data = await _context.FindAsync<ShortUrl>(shortUrl);
            if (data == null)
            {
                return Result<ShortUrlStatisticsDto>.Fail("Short URL not found.");
            }
            return Result<ShortUrlStatisticsDto>.Ok(MapStatisticsData(data), "Short URL statistics retrieved successfully.");
        }


        public async Task<Result<ShortUrlDto>> CreateAsync(string longUrl)
        {
            var entity = new ShortUrl
            {
                Url = longUrl,
                ShortCode = GenerateShortUrl(),
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = null,
                AccessCount = 0,
                Id = GetNextId() // Assuming Id is auto-generated by the database 
            };
            _context.ShortUrls.Add(entity);
            await _context.SaveChangesAsync();
            return Result<ShortUrlDto>.Ok(MapData(entity), "Short URL created successfully.");
        }

        public async Task<Result<ShortUrlDto>> UpdateAsync(string shortUrl, string longUrl)
        {
            var data = await _context.FindAsync<ShortUrl>(shortUrl);
            if (data == null)
            {
                return Result<ShortUrlDto>.Fail("Short URL not found.");
            }
            var entity = data;
            entity.Url = longUrl;
            entity.UpdatedAt = DateTime.UtcNow;
            _context.ShortUrls.Update(entity);
            await _context.SaveChangesAsync();
            return Result<ShortUrlDto>.Ok(MapData(entity), "Short URL updated successfully.");
        }

        public async Task<Result<bool>> DeleteAsync(string shortUrl)
        {
            var data = await _context.FindAsync<ShortUrl>(shortUrl);
            if (data == null)
            {
                return Result<bool>.Fail("Short URL not found.");
            }
            _context.ShortUrls.Remove(data);
            var status = await _context.SaveChangesAsync() > 0;
            return Result<bool>.Ok(status, status ? "Short URL deleted successfully." : "Failed to delete Short URL.");
        }





        #region Utility Methods

        private ShortUrlDto MapData(ShortUrl entity)
        {
            return new ShortUrlDto
            {
                Id = entity.Id,
                Url = entity.Url,
                ShortCode = entity.ShortCode,
                CreatedAt = entity.CreatedAt,
                UpdatedAt = entity.UpdatedAt
            };
        }


        private ShortUrlStatisticsDto MapStatisticsData(ShortUrl entity)
        {
            return new ShortUrlStatisticsDto
            {
                Id = entity.Id,
                Url = entity.Url,
                ShortCode = entity.ShortCode,
                CreatedAt = entity.CreatedAt,
                UpdatedAt = entity.UpdatedAt,
                AccessCount = entity.AccessCount
            };
        }

        private int GetNextId()
        {
            // This method should return the next available ID for a new ShortUrl.
            // In a real application, this would typically be handled by the database.
            return _context.ShortUrls.Any() ? _context.ShortUrls.Max(s => s.Id) + 1 : 1;
        }

        private string GenerateShortUrl()
        {
            long tickes = DateTime.UtcNow.Ticks;
            string base64 = Convert.ToBase64String(BitConverter.GetBytes(tickes));
            base64 = base64.Replace("/", "_").Replace("+", "-").TrimEnd('=');
            return base64;
        }

        #endregion
    }
}
